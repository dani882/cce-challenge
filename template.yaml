AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Environment:
      Variables:
        JSONBucket: 
          Ref: JSONBucket

Description: >
  
  SAM Template for cce challenge

Parameters:
  S3BucketName:
    Type: String
    Description: S3 Bucket name

Resources:
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
        AllowHeaders:
          - "*"   
        AllowOrigins: 
          - "*"      

  JSONBucket: # Create S3 bucket to be used for upload and retrieve json files
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref S3BucketName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"

  ## Lambda functions
  UploadRequestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/upload_json/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          UploadBucket: !Ref JSONBucket  
      Policies:
        - S3WritePolicy:
            BucketName: !Ref JSONBucket
        ## This permission allows the Lambda function to request signed URLs
        ## for objects that will be publicly readable. Uncomment if you want this ACL.
        - Statement:
          - Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${JSONBucket}/'
            Action:
              - s3:putObjectAcl
      Events:
        UploadAssetAPIEvent:
          Type: HttpApi
          Properties:
            Path: /uploads
            Method: get
            ApiId: !Ref MyApi  
  
  DynamoS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/retrieve_json/
      Runtime: python3.8
      Handler: lambda_function.lambda_handler
      Policies:
        - DynamoDBWritePolicy: 
            TableName:
              Ref: DynamoDBTable
        - S3ReadPolicy: 
            BucketName: 
              Ref: S3BucketName
        - Statement:
          - Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${JSONBucket}/'
            Action:
              - s3:GetObject
    Events:
      S3NewObjectEvent:
        Type: S3
        Properties:
          Bucket: !Ref JSONBucket
          Events: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:
                - Name: suffix
                  Value: ".json"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Brands
      AttributeDefinitions:
      - 
        AttributeName: id
        AttributeType: "N"
      
      - 
        AttributeName: name
        AttributeType: "S"
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: name
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

Outputs:
  APIEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com"
