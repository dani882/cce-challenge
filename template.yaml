AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Environment:
      Variables:
        JSONBucket: 
          Ref: JSONBucket


Description: >
  
  SAM Template for cce challenge

Resources:
  # HTTP API
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # CORS configuration - this is open for development only and should be restricted in prod.
      # See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html   
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
        AllowHeaders:
          - "*"   
        AllowOrigins: 
          - "*"      

  JSONBucket: # Create S3 bucket to be used for upload and retrieve json files
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"

  ## Lambda functions
  UploadRequestFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/upload_json/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          UploadBucket: !Ref JSONBucket  
      Policies:
        - S3WritePolicy:
            BucketName: !Ref JSONBucket
        ## This permission allows the Lambda function to request signed URLs
        ## for objects that will be publicly readable. Uncomment if you want this ACL.
        - Statement:
          - Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${JSONBucket}/'
            Action:
              - s3:putObjectAcl
      # For safe deployment with CodeDeploy https://github.com/aws/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Linear10PercentEvery10Minutes
      Events:
        UploadAssetAPIEvent:
          Type: HttpApi
          Properties:
            Path: /uploads
            Method: get
            ApiId: !Ref MyApi  
  DynamoS3Function: # Lambda to retrieve data from dynamodb
    Type: AWS::Serverless::Function
    Properties:
        CodeUri: functions/retrieve_json/
        Runtime: python3.8
        Handler: lambda_function.lambda_handler
        Policies:
          - DynamoDBWritePolicy: 
              TableName:
                Ref: DynamoDBTable
          - S3ReadPolicy: 
              BucketName: 
                Ref: JSONBucket
          - Statement:
            - Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${JSONBucket}/'
              Action:
                - s3:GetObject
    # For safe deployment with CodeDeploy https://github.com/aws/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
    AutoPublishAlias: live
    DeploymentPreference:
      Type: Linear10PercentEvery10Minutes
      Events:
        DynamoS3FunctionEvent:
          Type: S3
          Properties:
            Bucket: !Ref JSONBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.json'

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Brands
      AttributeDefinitions:
      - 
        AttributeName: id
        AttributeType: "N"
      
      - 
        AttributeName: name
        AttributeType: "S"
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: name
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

Outputs:
  APIendpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com"

